<?php
/**
 * bbPress Reply By Email Extension.
 *
 * Allows BP group members to reply to bbPress forum posts via email.
 *
 * Forum replies will be posted directly into the bbPress forum thread
 * and not as a nested activity comment.
 *
 * Requires the BP Group Email Subscription plugin
 * {@link http://wordpress.org/extend/plugins/buddypress-group-email-subscription/}
 * for the emails to be sent out.
 *
 * Your Group Email setting must be set to "All Mail" to reply to bbP posts.
 *
 * Can also post new topics via email in both BuddyPress groups and to
 * regular bbPress forums.
 *
 * @todo Re-enable ability to reply to regular bbPress topics (forums not attached
 *       to BuddyPress). Need to fix post link bug in email.
 *
 * @package BP_Reply_By_Email
 * @subpackage Classes
 */

// Exit if accessed directly
if ( ! defined( 'ABSPATH' ) ) exit;

/**
 * Adds RBE support to the bbPress plugin.
 *
 * Extends the abstract {@link BP_Reply_By_Email_Extension} class, which
 * helps do a lot of the dirty work!
 *
 * @package BP_Reply_By_Email
 * @subpackage Extensions
 * @since 1.0-RC1
 */
class BBP_RBE_Extension extends BP_Reply_By_Email_Extension {

	/**
	 * Constructor.
	 */
	public function __construct() {

		// (required) must use the bootstrap() method in your constructor!
		// once you've used the bootstrap() method, you can call your params magically
		// eg.
		//    $this->id
		//    $this->activity_type
		$this->bootstrap( array(
			'id'            => 'bbpress-groups',   // your extension name
			'activity_type' => 'bbp_reply_create', // we have to actually match two activity types, so we're going to override the
			                                       // extend_activity_listener() method
			'item_id_param' => 'bbpg',             // parameter name for your activity 'item_id'; in our case 'item_id' is the
			                                       // group ID, hence the shortname 'bbpg'
			'secondary_item_id_param' => 'bbpt',   // parameter name for your activity 'secondary_item_id'; in our case
			                                       // 'secondary_item_id' will be the topic ID we want to reply to, hence
			                                       // the shortname 'bbpt'

			// custom params
			// here you can add whatever you want and you can use it in your class
			'forum_id_param' => 'bbpf'
		) );

		// custom hooks
		$this->custom_hooks();

	}

	/**
	 * Some custom hooks this class uses.
	 */
	private function custom_hooks() {
		// cache topic ID after a bbPress forum post is made in a BP group
		add_action( 'bbp_new_reply',                     array( $this, 'get_topic_id' ),  10, 2 );

		// register our additional param with RBE
		add_filter( 'bp_rbe_allowed_params',             array( $this, 'register_custom_params' ) );

		// add new topic CSS to a bbPress forum page
		add_filter( 'bp_rbe_new_topic_info_css',         array( $this, 'new_topic_via_email_css' ) );

		// add "Post New Topic via Email" block for bbP
		add_action( 'bbp_theme_before_topic_form_title', array( $this, 'new_topic_via_email_block' ) );

		// modify querystring in 'new topic' group email address
		add_filter( 'bp_rbe_encode_group_querystring',   array( $this, 'new_topic_querystring' ), 10, 2 );

		// clear locally-cached values after post is submitted
		add_action( 'bp_rbe_imap_no_match',              array( $this, 'clear_global_cache' ) );
		add_action( 'bbp_new_topic_post_extras',         array( $this, 'clear_global_cache' ) );
		add_action( 'bbp_new_reply_post_extras',         array( $this, 'clear_global_cache' ) );
	}

	/**
	 * RBE activity listener for our bbPress-GES extension.
	 *
	 * We're overriding the parent method because we're trying to match two
	 * activity types and our 'secondary_item_id' needs to be calculated in a
	 * different manner for the 'bbp_reply_create' activity type.
	 *
	 * @param obj $listener Registers your component with RBE's activity listener
	 * @param obj $item The activity object generated by BP during save.
	 */
	public function extend_activity_listener( $listener, $item ) {
		// if activity item does not match groups, stop now!
		if ( $item->component != 'groups' )
			return;

		// if activity type does not match our bbPress types, stop now!
		if ( $item->type != $this->activity_type && $item->type != 'bbp_topic_create' )
			return;

		// setup our component
		$listener->component = $this->id;

		// setup our item ID, which is the group ID
		$listener->item_id   = $item->item_id;

		// setup our secondary item ID, which is the topic ID
		$listener->secondary_item_id = $item->secondary_item_id;

		// if activity type is a bbPress reply, we need to grab the topic ID manually
		if ( $item->type == $this->activity_type ) {
			global $bp;

			// grab our locally-cached topic ID
			// @see get_topic_id() method (handles frontend)
			// @see post_by_email() method (handles posting by email)
			if ( ! empty( $bp->rbe->temp->topic_id ) ) {
				$listener->secondary_item_id = $bp->rbe->temp->topic_id;
			}
		}

	}

	/**
	 * Sets up the querystring used in the 'Reply-To' email address.
	 *
	 * Overrides our parent method to support our second component listener in
	 * the bbp_listener() method.
	 *
 	 * @param string $querystring Querystring used to form the "Reply-To" email address.
 	 * @param obj $listener The listener object registered in the extend_activity_listener() method.
 	 * @param string $querystring
	 */
	public function extend_querystring( $querystring, $listener ) {
		switch ( $listener->component ) {

			// check to see if the listener component matches our extension's unique ID
			// if it does, proceed with setting up our custom querystring
			case $this->id :
				$querystring = "{$this->item_id_param}={$listener->item_id}";

				// some querystrings only use one parameter; if a second one exists,
				// add it.
				if ( ! empty( $this->secondary_item_id_param ) )
					$querystring .= "&{$this->secondary_item_id_param}={$listener->secondary_item_id}";

				break;

			// check to see if component matches our secondary listener as defined in the
			// BP_Reply_By_Email::bbp_listener() method
			case 'bbpress' :
					$querystring = "{$this->secondary_item_id_param}={$listener->item_id}";

				break;
		}

		return $querystring;
	}

	/**
	 * Post by email handler.
	 *
	 * During the RBE inbox loop, detect our custom variables defined in the
	 * bootstrap() method and do our own checks and posting mechanisms.
	 *
	 * For devs analyzing this class, this method is *required* to be extended.
	 *
	 * For bbPress, the logic in this method is the same as {@link bbp_new_reply_handler()}.
	 * It's duplicated because bbPress doesn't utilize hooks for verifying replies.
	 *
	 * @param resource $connection The current IMAP connection. Chances are you won't need to use this, unless you're doing something fancy!
	 * @param int $i The current message number in the inbox loop
	 * @param array $headers The email headers
	 * @param array $params Holds an array of params used by RBE. Also holds the params registered in this extension from the bootstrap() method.
	 * @param string $body The reply contents
	 * @param int $user_id The user ID
	 */
	public function post_by_email( $connection, $i, $headers, $params, $body, $user_id ) {

		/** SETUP DATA ***************************************************/

		// reset globals
		global $bp;

		if ( empty( $bp->rbe->temp ) ) {
			$bp->rbe       = new stdClass;
			$bp->rbe->temp = new stdClass;
		}

		// get topic ID
		$topic_id = ! empty( $params[$this->secondary_item_id_param] ) ? $params[$this->secondary_item_id_param] : false;

		// current email is not a bbPress group reply
		if ( empty( $topic_id ) ) {
			// if current email is a bbPress new group topic, parse it
			if ( ! empty( $params[$this->forum_id_param] ) ) {
				$this->post_new_topic_by_email( $connection, $i, $headers, $params, $body, $user_id );
			}

			return;
		}

		/* current email is a bbPress group reply, let's proceed! */

		// let RBE know that we're in the process of rendering a bbP reply
		// BuddyPress group forum reply
		if ( ! empty( $params[$this->item_id_param] ) ) {
			bp_rbe_log( 'Message #' . $i . ': this is a bbPress group forum reply' );

		// bbPress
		} else {
			bp_rbe_log( 'Message #' . $i . ': this is a bbPress forum reply' );
		}

		// locally cache topic ID - referenced in extend_activity_listener() method
		$bp->rbe->temp->topic_id  = $topic_id;

		// other variables
		$reply_author   = $user_id;
		$anonymous_data = 0;

		/** GROUP PERMISSIONS ********************************************/

		// posting from a BP group
		if ( ! empty( $params[$this->item_id_param] ) ) {
			// set group ID and cache it in global for later use
			// $bp->rbe->temp->group_id gets passed to the set_group_id() method later on
			$group_id = $bp->rbe->temp->group_id = $params[$this->item_id_param];

			// get all group member data for the user in one swoop!
			$group_member_data = bp_rbe_get_group_member_info( $reply_author, $group_id );

			// user is not a member of the group anymore
			if ( empty( $group_member_data ) ) {
				do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'user_not_group_member' );
				return;
			}

			// user is banned from group
			if ( (int) $group_member_data->is_banned == 1 ) {
				do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'user_banned_from_group' );
				return;
			}

			// override groups_get_current_group() with our cached group ID
			add_filter( 'groups_get_current_group',  array( $this, 'set_group_id' ) );

			// make sure bbP doesn't send any emails as GES handles this
			add_filter( 'bbp_get_topic_subscribers', '__return_false' );

			// temporarily add some GES filters here
			add_filter( 'bp_ass_activity_notification_subject', 'wp_specialchars_decode' );
			add_filter( 'bp_ass_activity_notification_content', 'wp_specialchars_decode' );
		}

		/** REPLY PERMISSIONS ********************************************/

		// User cannot create replies
		if ( ! user_can( $reply_author, 'publish_replies' ) ) {
			do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_reply_permissions' );
			return;
		}

		/** UNFILTERED HTML **********************************************/

		// Remove wp_filter_kses filters from title and content for capable users
		if ( user_can( $user_id, 'unfiltered_html' ) ) {
			remove_filter( 'bbp_new_reply_pre_title',   'wp_filter_kses' );
			remove_filter( 'bbp_new_reply_pre_content', 'wp_filter_kses' );
		}

		/** REPLY DATA ***************************************************/

		// setup a dummy reply title b/c bbP requires it
		$reply_title = sprintf( __( 'Reply To: Topic ID %d', 'bp-rbe' ), $topic_id );

		// Filter and sanitize
		$reply_content = apply_filters( 'bbp_new_reply_pre_content', $body );

		/** REPLY MODERATION *********************************************/

		// Reply Flooding
		if ( ! bbp_check_for_flood( $anonymous_data, $reply_author ) ) {
			do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_reply_flood' );
			//bbp_add_error( 'bbp_reply_flood', __( '<strong>ERROR</strong>: Slow down; you move too fast.', 'bbpress' ) );
			return;
		}

		// Reply Duplicate
		if ( ! bbp_check_for_duplicate( array(
			'post_type'      => bbp_get_reply_post_type(),
			'post_author'    => $reply_author,
			'post_content'   => $reply_content,
			'post_parent'    => $topic_id,
			'anonymous_data' => $anonymous_data
		 ) ) ) {
			do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_reply_duplicate' );
			return;
		}

		// Reply Blacklist
		if ( ! bbp_check_for_blacklist( $anonymous_data, $reply_author, $reply_title, $reply_content ) ) {
			do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_reply_blacklist' );
			return;
		}

		// Reply Status
		// Maybe put into moderation
		if ( ! bbp_check_for_moderation( $anonymous_data, $reply_author, $reply_title, $reply_content ) ) {
			$reply_status = bbp_get_pending_status_id();

		// Default
		} else {
			$reply_status = bbp_get_public_status_id();
		}

		/** POSTING TIME! ************************************************/

		// get forum ID
		$forum_id = bbp_get_topic_forum_id( $topic_id );

		// bbP hook before save
		do_action( 'bbp_new_reply_pre_extras', $topic_id, $forum_id );

		// Setup reply data
		$reply_data = apply_filters( 'bbp_new_reply_pre_insert', array(
			'post_author'    => $reply_author,
			'post_title'     => $reply_title,
			'post_content'   => $reply_content,
			'post_status'    => $reply_status,
			'post_parent'    => $topic_id,
			'post_type'      => bbp_get_reply_post_type(),
			'comment_status' => 'closed',
			'menu_order'     => bbp_get_topic_reply_count( $topic_id, false ) + 1
		) );

		// Insert reply
		$reply_id = wp_insert_post( $reply_data );

		// Reply posted!
		if ( ! is_wp_error( $reply_id ) ) {
			// more internal logging
			bp_rbe_log( 'Message #' . $i . ': bbPress reply successfully posted!' );

		// Problem posting
		} else {
			do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_reply_error' );
			return;
		}

		/** AFTER POSTING ************************************************/

		// stuff that needs to happen after a bbP reply is posted occurs here... bbP
		// should preferably do the following at the 'bbp_new_reply' hook, until then
		// do what bbP does inline.

		// Trash Check ////////////////////////////////////////////////////

		// If this reply starts as trash, add it to pre_trashed_replies
		// for the topic, so it is properly restored.
		if ( bbp_is_topic_trash( $topic_id ) || ( $reply_data['post_status'] == bbp_get_trash_status_id() ) ) {

			// Trash the reply
			wp_trash_post( $reply_id );

			// Only add to pre-trashed array if topic is trashed
			if ( bbp_is_topic_trash( $topic_id ) ) {

				// Get pre_trashed_replies for topic
				$pre_trashed_replies = get_post_meta( $topic_id, '_bbp_pre_trashed_replies', true );

				// Add this reply to the end of the existing replies
				$pre_trashed_replies[] = $reply_id;

				// Update the pre_trashed_reply post meta
				update_post_meta( $topic_id, '_bbp_pre_trashed_replies', $pre_trashed_replies );
			}

		// Spam Check /////////////////////////////////////////////////////

		// If reply or topic are spam, officially spam this reply
		} elseif ( bbp_is_topic_spam( $topic_id ) || ( $reply_data['post_status'] == bbp_get_spam_status_id() ) ) {
			add_post_meta( $reply_id, '_bbp_spam_meta_status', bbp_get_public_status_id() );

			// Only add to pre-spammed array if topic is spam
			if ( bbp_is_topic_spam( $topic_id ) ) {

				// Get pre_spammed_replies for topic
				$pre_spammed_replies = get_post_meta( $topic_id, '_bbp_pre_spammed_replies', true );

				// Add this reply to the end of the existing replies
				$pre_spammed_replies[] = $reply_id;

				// Update the pre_spammed_replies post meta
				update_post_meta( $topic_id, '_bbp_pre_spammed_replies', $pre_spammed_replies );
			}
		}

		// Reply By Email /////////////////////////////////////////////////

		// Add a RBE marker to the post's meta
		// Could potentially show that post was made via email on the frontend
		add_post_meta( $reply_id, 'bp_rbe', 1 );

		/** POST HOOKS ***************************************************/

		// RBE Custom Hooks ///////////////////////////////////////////////

		// change activity action
		add_filter( 'bbp_before_record_activity_parse_args', array( $this, 'change_activity_action' ) );

		// add RBE's special activity hook
		add_action( 'bp_activity_after_save',                array( $this, 'activity_rbe_hook' ) );

		// bbPress Reply Hooks ////////////////////////////////////////////

		do_action( 'bbp_new_reply',                          $reply_id, $topic_id, $forum_id, $anonymous_data, $reply_author );
		do_action( 'bbp_new_reply_post_extras',              $reply_id );

	}

	/**
	 * Post new topic by email handler.
	 *
	 * For bbPress, the logic in this method is the same as {@link bbp_new_topic_handler()}.
	 * It's duplicated because bbPress doesn't utilize hooks for verifying topics.
	 *
	 * @todo No fancy support for topic tags, subscriptions yet. Will probably need shortcodes.
	 *
	 * @param resource $connection The current IMAP connection. Chances are you won't need to use this, unless you're doing something fancy!
	 * @param int $i The current message number in the inbox loop
	 * @param array $headers The email headers
	 * @param array $params Holds an array of params used by RBE. Also holds the params registered in this extension from the bootstrap() method.
	 * @param string $body The new topic contents
	 * @param int $user_id The user ID
	 */
	private function post_new_topic_by_email( $connection, $i, $headers, $params, $body, $topic_author ) {

		/** SETUP DATA ***************************************************/

		$forum_id = $params[$this->forum_id_param];

		/* current email is a bbPress new topic, let's proceed! */

		// let RBE know that we're in the process of rendering a bbP new topic
		// BuddyPress group new topic
		if ( ! empty( $params[$this->item_id_param] ) ) {
			bp_rbe_log( 'Message #' . $i . ': this is a bbPress group forum new topic' );

		// bbPress
		} else {
			bp_rbe_log( 'Message #' . $i . ': this is a bbPress new topic' );
		}

		// other variables
		$anonymous_data = 0;

		/** GROUP PERMISSIONS ********************************************/

		// posting from a BP group
		if ( ! empty( $params[$this->item_id_param] ) ) {
			global $bp;

			// set group ID and cache it in global for later use
			// $bp->rbe->temp->group_id gets passed to the set_group_id() method later on
			$group_id = $bp->rbe->temp->group_id = $params[$this->item_id_param];

			// get all group member data for the user in one swoop!
			$group_member_data = bp_rbe_get_group_member_info( $topic_author, $group_id );

			// user is not a member of the group anymore
			if ( empty( $group_member_data ) ) {
				do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'user_not_group_member' );
				return;
			}

			// user is banned from group
			if ( (int) $group_member_data->is_banned == 1 ) {
				do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'user_banned_from_group' );
				return;
			}

			// override groups_get_current_group() with our cached group ID
			add_filter( 'groups_get_current_group', array( $this, 'set_group_id' ) );

			// temporarily add some GES filters here
			add_filter( 'bp_ass_activity_notification_subject', 'wp_specialchars_decode' );
			add_filter( 'bp_ass_activity_notification_content', 'wp_specialchars_decode' );
		}

		/** TOPIC / FORUM PERMISSIONS ************************************/

		// User cannot create topics
		if ( ! user_can( $topic_author, 'publish_topics' ) ) {
			do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_topic_permissions' );
			return;
		}

		// Forum is a category
		if ( bbp_is_forum_category( $forum_id ) ) {
			do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_edit_topic_forum_category' );
			//bbp_add_error( 'bbp_edit_topic_forum_category', __( '<strong>ERROR</strong>: This forum is a category. No topics can be created in this forum.', 'bbpress' ) );
			return;

		// Forum is not a category
		} else {

			// Forum is closed and user cannot access
			if ( bbp_is_forum_closed( $forum_id ) && ! user_can( $topic_author, 'edit_forum' ) ) {
				do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_edit_topic_forum_closed' );
				//bbp_add_error( 'bbp_edit_topic_forum_closed', __( '<strong>ERROR</strong>: This forum has been closed to new topics.', 'bbpress' ) );
				return;
			}

			// Forum is private and user cannot access
			if ( bbp_is_forum_private( $forum_id ) ) {
				if ( ! user_can( $topic_author, 'read_private_forums' ) ) {
					do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_edit_topic_forum_private' );
					//bbp_add_error( 'bbp_edit_topic_forum_private', __( '<strong>ERROR</strong>: This forum is private and you do not have the capability to read or create new topics in it.', 'bbpress' ) );
					return;
				}
			}

			// Forum is hidden and user cannot access
			if ( bbp_is_forum_hidden( $forum_id ) ) {
				if ( ! user_can( $topic_author, 'read_hidden_forums' ) ) {
					do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_edit_topic_forum_hidden' );
					//bbp_add_error( 'bbp_edit_topic_forum_hidden', __( '<strong>ERROR</strong>: This forum is hidden and you do not have the capability to read or create new topics in it.', 'bbpress' ) );
					return;
				}
			}
		}

		/** UNFILTERED HTML **********************************************/

		// Remove wp_filter_kses filters from title and content for capable users
		if ( user_can( $user_id, 'unfiltered_html' ) ) {
			remove_filter( 'bbp_new_topic_pre_title',   'wp_filter_kses' );
			remove_filter( 'bbp_new_topic_pre_content', 'wp_filter_kses' );
		}

		/** TOPIC DATA ***************************************************/

		$topic_content = BP_Reply_By_Email_IMAP::body_parser( $connection, $i, false );
		$topic_title   = BP_Reply_By_Email_IMAP::address_parser( $headers, 'Subject' );

		bp_rbe_log( 'Message #' . $i . ': body contents - ' . $topic_content );
		bp_rbe_log( 'Subject - ' . $topic_title );

		if ( empty( $topic_content ) || empty( $topic_title ) ) {
			do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_new_forum_topic_empty' );
			return;
		}

		// Filter and sanitize
		$topic_title   = apply_filters( 'bbp_new_topic_pre_title',   $topic_title );
		$topic_content = apply_filters( 'bbp_new_topic_pre_content', $topic_content );

		/** Topic Tags ****************************************************/

		/* TODO
		if ( bbp_allow_topic_tags() ) {

			// Escape tag input
			$terms = esc_attr( strip_tags( $_POST['bbp_topic_tags'] ) );

			// Explode by comma
			if ( strstr( $terms, ',' ) ) {
				$terms = explode( ',', $terms );
			}

			// Add topic tag ID as main key
			$terms = array( bbp_get_topic_tag_tax_id() => $terms );
		}
		*/

		/** TOPIC MODERATION *********************************************/

		// Post Flooding
		if ( ! bbp_check_for_flood( $anonymous_data, $topic_author ) ) {
			do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_topic_flood' );
			//bbp_add_error( 'bbp_reply_flood', __( '<strong>ERROR</strong>: Slow down; you move too fast.', 'bbpress' ) );
			return;
		}

		// Topic Duplicate
		if ( ! bbp_check_for_duplicate( array(
			'post_type'      => bbp_get_topic_post_type(),
			'post_author'    => $topic_author,
			'post_content'   => $topic_content,
			'anonymous_data' => $anonymous_data
		 ) ) ) {
			do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_topic_duplicate' );
			return;
		}

		// Topic Blacklist
		if ( ! bbp_check_for_blacklist( $anonymous_data, $topic_author, $topic_title, $topic_content ) ) {
			do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_topic_blacklist' );
			return;
		}

		// Topic Status
		// Maybe put into moderation
		if ( ! bbp_check_for_moderation( $anonymous_data, $topic_author, $topic_title, $topic_content ) ) {
			$topic_status = bbp_get_pending_status_id();

		// Default
		} else {
			$topic_status = bbp_get_public_status_id();
		}

		/** POSTING TIME! ************************************************/

		// bbP hook before save
		do_action( 'bbp_new_topic_pre_extras', $forum_id );

		// Setup reply data
		$topic_data = apply_filters( 'bbp_new_topic_pre_insert', array(
			'post_author'    => $topic_author,
			'post_title'     => $topic_title,
			'post_content'   => $topic_content,
			'post_status'    => $topic_status,
			'post_parent'    => $forum_id,
			'post_type'      => bbp_get_topic_post_type(),
			//'tax_input'    => false,
			'comment_status' => 'closed'
		) );

		// Insert topic
		$topic_id = wp_insert_post( $topic_data );

		// Topic posted!
		if ( ! is_wp_error( $topic_id ) ) {
			// more internal logging
			bp_rbe_log( 'Message #' . $i . ': bbPress topic successfully posted!' );

		// Problem posting
		} else {
			do_action( 'bp_rbe_imap_no_match', $connection, $i, $headers, 'bbp_topic_error' );
			return;
		}

		/** AFTER POSTING ************************************************/

		// stuff that needs to happen after a bbP topic is posted occurs here... bbP
		// should preferably do the following at the 'bbp_new_reply' hook, until then
		// do what bbP does inline.

		// Trash Check ////////////////////////////////////////////////////

		// If the forum is trash, or the topic_status is switched to
		// trash, trash it properly
		if ( ( get_post_field( 'post_status', $forum_id ) == bbp_get_trash_status_id() ) || ( $topic_data['post_status'] == bbp_get_trash_status_id() ) ) {

			// Trash the reply
			wp_trash_post( $topic_id );
		}

		// Spam Check /////////////////////////////////////////////////////

		// If reply or topic are spam, officially spam this reply
		if ( $topic_data['post_status'] == bbp_get_spam_status_id() ) {
			add_post_meta( $topic_id, '_bbp_spam_meta_status', bbp_get_public_status_id() );
		}

		// Reply By Email /////////////////////////////////////////////////

		// Add a RBE marker to the post's meta
		// Could potentially show that post was made via email on the frontend
		add_post_meta( $topic_id, 'bp_rbe', 1 );

		/** POST HOOKS ***************************************************/

		// RBE Custom Hooks ///////////////////////////////////////////////

		// change activity action
		add_filter( 'bbp_before_record_activity_parse_args', array( $this, 'change_activity_action' ) );

		// add RBE's special activity hook
		add_action( 'bp_activity_after_save',                array( $this, 'activity_rbe_hook' ) );

		// bbPress Topic Hooks ////////////////////////////////////////////

		do_action( 'bbp_new_topic',             $topic_id, $forum_id, $anonymous_data, $topic_author );
		do_action( 'bbp_new_topic_post_extras', $topic_id );

	}

	/**
	 * Log our extension's error messages during the post_by_email() method.
	 *
	 * @param mixed $log
	 * @param string $type Type of error message
	 * @param array $headers The email headers
	 * @param int $i The message number from the inbox loop
	 * @param resource $connection The current IMAP connection. Chances are you probably don't have to do anything with this!
	 * @return mixed Could be a string or boolean false.
	 */
	public function internal_rbe_log( $log, $type, $headers, $i, $connection ) {
		switch( $type ) {
			/** REPLIES *****************************************************/

			case 'bbp_reply_permissions' :
				$log = __( "error - bbPress reply failed. user does not have the 'publish_replies' capability to post.", 'bp-rbe' );

				break;

			case 'bbp_reply_flood' :
				$log = __( "error - bbPress reply failed. user is flooding!", 'bp-rbe' );

				break;

			case 'bbp_reply_duplicate' :
				$log = __( "error - bbPress reply failed. duplicate reply detected.", 'bp-rbe' );

				break;

			case 'bbp_reply_blacklist' :
				$log = __( "error - bbPress reply failed. reply was blacklisted.", 'bp-rbe' );

				break;

			case 'bbp_reply_error' :
				$log = __( 'error - bbPress reply failed. reply failed to post.', 'bp-rbe' );

				break;

			/** TOPICS *****************************************************/

			case 'bbp_topic_permissions' :
				$log = __( "error - bbPress new topic failed. user does not have the 'publish_topics' capability to post.", 'bp-rbe' );

				break;

			case 'bbp_edit_topic_forum_category' :
				$log = __( "error - bbPress new topic failed. forum is a category. topics cannot be created in forum categories.", 'bp-rbe' );

				break;

			case 'bbp_edit_topic_forum_closed' :
				$log = __( "error - bbPress new topic failed. forum is closed. no new topics allowed.", 'bp-rbe' );

				break;

			case 'bbp_edit_topic_forum_private' :
				$log = __( "error - bbPress new topic failed. forum is private. user doesn't have access.", 'bp-rbe' );

				break;

			case 'bbp_edit_topic_forum_hidden' :
				$log = __( "error - bbPress new topic failed. forum is hidden. user doesn't have access.", 'bp-rbe' );

				break;

			case 'bbp_topic_flood' :
				$log = __( "error - bbPress new topic failed. user is flooding!", 'bp-rbe' );

				break;

			case 'bbp_topic_duplicate' :
				$log = __( "error - bbPress new topic failed. duplicate topic detected.", 'bp-rbe' );

				break;

			case 'bbp_topic_blacklist' :
				$log = __( "error - bbPress new topic failed. topic was blacklisted.", 'bp-rbe' );

				break;

			case 'bbp_topic_error' :
				$log = __( 'error - bbPress new topic failed. topic failed to post.', 'bp-rbe' );

				break;
		}

		return $log;
	}

	/**
	 * Setup our extension's failure message to send back to the sender.
	 *
	 * @param mixed $message
	 * @param string $type Type of error message
	 * @param array $headers The email headers
	 * @param int $i The message number from the inbox loop
	 * @param resource $connection The current IMAP connection. Chances are you probably don't have to do anything with this!
	 * @return mixed Could be a string or boolean false.
	 */
	public function failure_message_to_sender( $message, $type, $headers, $i, $imap ) {
		switch( $type ) {
			/** REPLIES *****************************************************/

			case 'bbp_reply_permissions' :
				$message = sprintf( __( 'Hi there,

Your reply to the forum topic:

"%s"

Could not be posted because it appears that you do not have the ability to post replies.

We apologize for any inconvenience this may have caused.', 'bp-rbe' ), BP_Reply_By_Email_IMAP::body_parser( $imap, $i ) );

				break;

			case 'bbp_reply_flood' :
				$message = sprintf( __( 'Hi there,

Your reply to the forum topic:

"%s"

Could not be posted because it appears that you are trying to post too often.  Please wait a few minutes and try again.

We apologize for any inconvenience this may have caused.', 'bp-rbe' ), BP_Reply_By_Email_IMAP::body_parser( $imap, $i ) );

				break;

			case 'bbp_reply_duplicate' :
				$message = sprintf( __( 'Hi there,

Your reply to the forum topic:

"%s"

Could not be posted because it appears you have already made the same reply.

We apologize for any inconvenience this may have caused.', 'bp-rbe' ), BP_Reply_By_Email_IMAP::body_parser( $imap, $i ) );

				break;

			case 'bbp_reply_blacklist' :
				$message = sprintf( __( 'Hi there,

Your reply to the forum topic:

"%s"

Could not be posted because the content of your message was automatically marked as spam.

We apologize for any inconvenience this may have caused.', 'bp-rbe' ), BP_Reply_By_Email_IMAP::body_parser( $imap, $i ) );

				break;

			case 'bbp_reply_error' :
				$message = sprintf( __( 'Hi there,

Your reply to the forum topic:

"%s"

Could not be posted due to an error.

We apologize for any inconvenience this may have caused.', 'bp-rbe' ), BP_Reply_By_Email_IMAP::body_parser( $imap, $i ) );

				break;

			/** TOPICS *****************************************************/

			case 'bbp_topic_permissions' :
				$message = sprintf( __( 'Hi there,

Your new forum topic:

"%s"

Could not be posted because it appears that you do not have the ability to post topics.

We apologize for any inconvenience this may have caused.', 'bp-rbe' ), BP_Reply_By_Email_IMAP::body_parser( $imap, $i, false ) );

				break;

			case 'bbp_edit_topic_forum_category' :
				$message = sprintf( __( 'Hi there,

Your new forum topic:

"%s"

Could not be posted because the forum you are trying to post in is a forum category.  Forum categories cannot contain topics.

We apologize for any inconvenience this may have caused.', 'bp-rbe' ), BP_Reply_By_Email_IMAP::body_parser( $imap, $i, false ) );

				break;

			case 'bbp_edit_topic_forum_closed' :
				$message = sprintf( __( 'Hi there,

Your new forum topic:

"%s"

Could not be posted because the forum you are trying to post in is closed and no new topics can be created there.

We apologize for any inconvenience this may have caused.', 'bp-rbe' ), BP_Reply_By_Email_IMAP::body_parser( $imap, $i, false ) );

				break;

			case 'bbp_edit_topic_forum_private' :
			case 'bbp_edit_topic_forum_hidden' :
				$message = sprintf( __( 'Hi there,

Your new forum topic:

"%s"

Could not be posted because it appears that you do not have access to that forum.

We apologize for any inconvenience this may have caused.', 'bp-rbe' ), BP_Reply_By_Email_IMAP::body_parser( $imap, $i, false ) );

				break;

			case 'bbp_topic_flood' :
				$message = sprintf( __( 'Hi there,

Your new forum topic:

"%s"

Could not be posted because it appears that you are trying to post too often.  Please wait a few minutes and try again.

We apologize for any inconvenience this may have caused.', 'bp-rbe' ), BP_Reply_By_Email_IMAP::body_parser( $imap, $i, false ) );

				break;

			case 'bbp_topic_duplicate' :
				$message = sprintf( __( 'Hi there,

Your new forum topic:

"%s"

Could not be posted because it appears you already created this topic before.

We apologize for any inconvenience this may have caused.', 'bp-rbe' ), BP_Reply_By_Email_IMAP::body_parser( $imap, $i, false ) );

				break;

			case 'bbp_topic_blacklist' :
				$message = sprintf( __( 'Hi there,

Your new forum topic:

"%s"

Could not be posted because the content of your message was automatically marked as spam.

We apologize for any inconvenience this may have caused.', 'bp-rbe' ), BP_Reply_By_Email_IMAP::body_parser( $imap, $i, false ) );

				break;

			case 'bbp_topic_error' :
				$message = sprintf( __( 'Hi there,

Your new forum topic:

"%s"

Could not be posted due to an error.

We apologize for any inconvenience this may have caused.', 'bp-rbe' ), BP_Reply_By_Email_IMAP::body_parser( $imap, $i, false ) );

				break;

		}

		return $message;
	}

	/** CUSTOM METHODS ************************************************/

	/**
	 * This method registers our custom 'forum_id_param' with RBE.
	 *
	 * @param array $params Whitelisted parameters used by RBE for the querystring
	 * @return array $params
	 */
	public function register_custom_params( $params ) {
		$params[$this->forum_id_param] = false;

		return $params;
	}

	/**
	 * Locally cache the topic ID after a bbPress forum post is made.
	 *
	 * @param int $reply_id The reply post ID created by bbPress
	 * @param int $topic_id The topic post ID created by bbPress
	 */
	public function get_topic_id( $reply_id, $topic_id ) {
		if ( bp_is_group() ) {
			global $bp;

			if ( empty( $bp->rbe ) && empty( $bp->rbe->temp ) ) {
				$bp->rbe = new stdClass;
				$bp->rbe->temp = new stdClass;
			}

			$bp->rbe->temp->topic_id = $topic_id;
		}
	}

	/**
	 * Set locally-cached group ID so groups_get_current_group() will work in
	 * {@link BBP_Forums_Group_Extension::map_activity_to_group()}.
	 *
	 * @param obj|bool $group The BP group object if it exists; boolean if it doesn't
	 */
	public function set_group_id( $group ) {
		if ( ! $group ) {
			global $bp;

			// create fake group object and populate it with our locally-cached group ID
			if ( ! empty( $bp->rbe->temp->group_id ) ) {
				$group = new stdClass;
				$group->id = $bp->rbe->temp->group_id;
			}
		}

		return $group;
	}

	/**
	 * Clear lingering global cache.
	 *
	 * Interferes with email sending in the inbox loop.
	 */
	public function clear_global_cache() {
		global $bp;

		if ( ! empty( $bp->rbe->temp->group_id ) ) {
			unset( $bp->rbe->temp->group_id );
		}
	}

	/**
	 * Modify activity action to add our custom 'via email' string at the end.
	 *
	 * @param array $args Activity arguments before recording
	 */
	public function change_activity_action( $args ) {

		// modify activity action so it adds our appended 'via email' string
		// yeah... not great for localization at the moment
		$args['action'] = sprintf( __( '%s via email', 'bp-rbe' ), $args['action'] );

		return $args;
	}

	/**
	 * Add RBE's special activity hook.
	 *
	 * @param obj $activity The BP_Activity_Activity object created after save
	 */
	public function activity_rbe_hook( $activity ) {
		do_action( 'bp_rbe_new_activity', array(
			'activity_id'       => $activity->id,
			'type'              => $activity->type,
			'user_id'           => $activity->user_id,
			'item_id'           => $activity->item_id,
			'secondary_item_id' => $activity->secondary_item_id,
			'content'           => $activity->content
		) );
	}

	/**
	 * Use 'Post New Topics via Email' CSS on a bbP forum page.
	 */
	public function new_topic_via_email_css( $retval ) {
		if ( bbp_is_single_forum() )
			return true;

		return $retval;
	}

	/**
	 * Show 'Post New Topics via Email' block on a bbP forum page.
	 */
	public function new_topic_via_email_block() {
		// BuddyPress group
		if ( bp_is_group() ) {
			bp_rbe_new_topic_info();

		// Everything else
		} else {
			// if not on a bbPress forum, stop now!
			if ( ! bbp_is_single_forum() )
				return;

			global $bp;
		?>

			<h4><?php _e( 'Post New Topics via Email', 'bp-rbe' ) ?></h4>

			<p><?php _e( 'You can post new topics to this forum from the comfort of your email inbox.', 'bp-rbe' ) ?> <a href="javascript:;" id="rbe-toggle"><?php _e( 'Find out how!', 'bp-rbe' ) ?></a></p>

			<div id="rbe-message">
				<h5><?php printf( __( 'Send an email to <strong><a href="%s">%s</strong></a> and a new forum topic will be posted in %s.', 'bp-rbe' ), "mailto: " . bbp_get_forum_title() . " <" . $this->get_forum_encoded_email_address(). ">", $this->get_forum_encoded_email_address(), bbp_get_forum_title() ); ?></h5>

				<ul>
					<li><?php printf( __( 'Compose a new email from the same email address you registered with &ndash; %s', 'bp-rbe' ), '<strong>' . $bp->loggedin_user->userdata->user_email . '</strong>' ) ?>.</li>
					<li><?php _e( 'Put the address above in the "To:" field of the email.', 'bp-rbe' ) ?></li>
					<li><?php _e( 'The email subject will become the topic title.', 'bp-rbe' ) ?></li>
					<?php do_action( 'bp_rbe_new_topic_info_extra' ) ?>
				</ul>

				<p><?php _e( '<strong>Note:</strong> The email address above is unique to you and this forum. Do not share this email address with anyone else! (Each forum member will have their own unique email address.)', 'bp-rbe' ) ?></p>
			</div>

			<script type="text/javascript">
			jQuery(function() {
				jQuery('#rbe-toggle').show();
				jQuery('#rbe-message').hide();
				jQuery('#rbe-toggle').click(function() {
					jQuery('#rbe-message').toggle(300);
				});
			});

			</script>

		<?php
		}
	}

	/**
	 * Replace "Post New Topics via Email" email address to work with bbPress
	 * plugin.
	 *
	 * @param str $querystring Encoded querystring used in the email address
	 * @param int $user_id The user ID
	 * @return str Encoded querystring used in the email address
	 */
	public function new_topic_querystring( $querystring = '', $user_id = false ) {
		if ( empty( $user_id ) )
			$user_id = bp_loggedin_user_id();

		if ( empty( $user_id ) )
			return false;

		// bundled forums has been disabled and replaced with bbPress plugin
		if ( ! class_exists( 'BP_Forums_Component' ) ) {
			// setup default string
			$string = $this->forum_id_param . '=' . bbp_get_forum_id();

			// if on a BP group, add an extra param
			if ( bp_is_group() )
				$string .= "&{$this->item_id_param}=" . bp_get_current_group_id();

			$querystring = bp_rbe_encode( array(
				'string' => $string,
				'param'  => $user_id
			) );
		}

		return $querystring;
	}

	/**
	 * Template tag to return a bbP forum's encoded email address.
	 *
	 * @uses BBP_RBE_Extension::new_topic_querystring()
	 * @uses bp_rbe_inject_qs_in_email()
	 */
	public function get_forum_encoded_email_address() {
		$querystring = $this->new_topic_querystring();

		return bp_rbe_inject_qs_in_email( $querystring . '-new' );
	}

}
